<h2>Why Haskell</h2>

<p>
    Haskell is most likely quite different from any language you've ever used before. Compared to the 
    usual set of concepts in a programmer's mental toolbox, functional programming offers us a 
    profoundly different way to think about software.
</p>

<p>
    In Haskell, we de-emphasise code that modifies data.Instead, we focus on functions that take 
    immutable values as input and produce new values as output. Given the same inputs, these 
    unctions always return the same results. This is a core idea behind functional programming. 
</p>

<p>
    Along with not modifying data, our Haskell functions usually don't talk to the external world; we 
    call these functions pure. We make a strong distinction between pure code and the parts of our 
    programs that read or write files, communicate over network connections, or make robot arms 
    move. This makes it easier to organize, reason about, and test our programs.
</p>

<p>
    We abandon some ideas that might seem fundamental, such as having a for loop built into the 
    language. We have other, more flexible, ways to perform repetitive tasks.
</p>

<p>
    Even the way in which we evaluate expressions is different in Haskell. We defer every computation 
    until its result is actually needed: Haskell is a lazy language. Laziness is not merely a matter of 
    moving work around: it profoundly affects how we write programs.
</p>

@section CurrentPage{
    <strong>Learn -> Haskell -> WhyHaskell</strong>
}